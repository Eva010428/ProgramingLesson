# =============================================================================
# Thread(線程)、協程(Coroutine,微線程)
# =============================================================================
# 假設有1個洗衣房，裡面有10台洗衣機，有一個洗衣工在負責這10台洗衣機。
# 那麼洗衣房就相當於1個進程，洗衣工就相當1個執行緒。
# 如果有10個洗衣工，就相當於10個線程，1個進程是可以開多線程的。這就是多線程！
# 
# **那麼協程呢？ **
# 先不急。大家都知道，洗衣機洗衣服是需要等待時間的，如果10個洗衣工，1人負責1台洗衣機，這樣效率一定會提高，但不覺得浪費資源嗎？
# 明明1 個人能做的事，卻要10個人來做。只是把衣服放進去，打開開關，就沒事做了，等衣服洗好再拿出來就可以了。
# 就算很多人來洗衣服，1個人也足以應付了，開好第一台洗衣機，在等待的時候去開第二台洗衣機，再開第三台，……直到有衣服洗好了，就回來把衣服取出來，
# 接著再取另一台的（哪台洗好先就取哪台，所以協程是無序的）。這就是計算機的協程！洗衣機就是執行的方法。 」
# =============================================================================
import time



def washing1():
    time.sleep(1)
    print('washer1 finished')

def washing2():
    time.sleep(4)
    print('washer2 finished')

def washing3():
    time.sleep(3)
    print('washer3 finished')
    
if __name__ == '__main__':    
    start_time = time.time()
    washing1()
    washing2()
    washing3()
    end_time = time.time()
    print('SyncWashingMachine Consumption：{}'.format(end_time-start_time))